{"ast":null,"code":"import _classCallCheck from \"/Users/shashankvyas/projects/maker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shashankvyas/projects/maker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shashankvyas/projects/maker/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shashankvyas/projects/maker/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shashankvyas/projects/maker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/shashankvyas/projects/maker/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/shashankvyas/projects/maker/src/components/User.js\";\nimport React, { Component } from \"react\";\nimport { GOOGLE_API_KEY, CALENDAR_ID, CLIENT_ID, SCOPES } from \"../config.js\";\nimport { GoogleLogin, GoogleLogout } from 'react-google-login'; //don't think we need these here. Only on booking page. Keeping here in case we don't have it else where.\n\nvar DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\nvar ROUNDING = 30 * 60 * 1000;\nvar format = 'h:mm a';\n\nvar User =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(User, _React$Component);\n\n  //default state\n  function User(props) {\n    var _this;\n\n    _classCallCheck(this, User);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(User).call(this, props));\n    _this.state = {\n      loggedIn: [],\n      currentUser: null\n    };\n    _this.setUserState = _this.setUserState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //Basically check to see if we are logged in already\n\n\n  _createClass(User, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setUserState();\n    } //When login is successful we receive a googleUser json back from the service. Has some basic info like name, email and jwt token. We store it the session for later use\n    // FYI, session is the same throughout the app and can survive refresh.\n\n  }, {\n    key: \"onLoginSuccess\",\n    value: function onLoginSuccess(googleUser) {\n      var profile = googleUser.getBasicProfile();\n      document.getElementById('status').innerHTML = 'Thanks for logging in ' + profile.getName() + '!'; //Store responce in session. JWT key included. Type sessionStorage.getItem('googleUser') in console to view. Add add jwt to authorization header when making requests.\n\n      sessionStorage.setItem('googleUser', JSON.stringify(googleUser));\n      this.setUserState();\n    } //If for some reason we get an error on trying to login, we need to clean up.\n\n  }, {\n    key: \"onLoginFailure\",\n    value: function onLoginFailure(error) {\n      sessionStorage.clear('googleUser');\n      this.setUserState();\n    } //this method is called when the signout button is successful. Although logged out we need to clear the session and update the state\n\n  }, {\n    key: \"onLogout\",\n    value: function onLogout(googleUser) {\n      sessionStorage.clear('googleUser');\n      this.setUserState();\n      document.getElementById('status').innerHTML = null;\n    } //parse the plain string json to get the user name. Mainly POC if we want to include the name somewhere else. Also it is used to decide to show sign in or out above.\n\n  }, {\n    key: \"setUserState\",\n    value: function setUserState() {\n      var userJson = JSON.parse(sessionStorage.getItem('googleUser'));\n\n      if (userJson !== null) {\n        this.setState(function (state, props) {\n          return {\n            loggedIn: userJson,\n            currentUser: userJson.profileObj.givenName\n          };\n        });\n      } else {\n        this.setState(function (state, props) {\n          return {\n            loggedIn: null,\n            currentUser: null\n          };\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //part of the react-google-login library\n      var googleSignIn = React.createElement(GoogleLogin, {\n        clientId: CLIENT_ID,\n        buttonText: \"Login in with Google\",\n        onSuccess: this.onLoginSuccess.bind(this),\n        onFailure: this.onLoginFailure.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n      var googleSignOut = React.createElement(GoogleLogout, {\n        buttonText: \"Logout\",\n        onLogoutSuccess: this.onLogout.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        className: \"Loginwrapper\",\n        style: {\n          textAlign: \"center\",\n          paddingTop: 200\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, this.state.currentUser === null ? googleSignIn : googleSignOut, React.createElement(\"div\", {\n        id: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return User;\n}(React.Component);\n\nexport default User;","map":{"version":3,"sources":["/Users/shashankvyas/projects/maker/src/components/User.js"],"names":["React","Component","GOOGLE_API_KEY","CALENDAR_ID","CLIENT_ID","SCOPES","GoogleLogin","GoogleLogout","DISCOVERY_DOCS","ROUNDING","format","User","props","state","loggedIn","currentUser","setUserState","bind","googleUser","profile","getBasicProfile","document","getElementById","innerHTML","getName","sessionStorage","setItem","JSON","stringify","error","clear","userJson","parse","getItem","setState","profileObj","givenName","googleSignIn","onLoginSuccess","onLoginFailure","googleSignOut","onLogout","textAlign","paddingTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { GOOGLE_API_KEY, CALENDAR_ID, CLIENT_ID, SCOPES } from \"../config.js\";\nimport {GoogleLogin,GoogleLogout} from 'react-google-login';\n\n//don't think we need these here. Only on booking page. Keeping here in case we don't have it else where.\nvar DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\nconst ROUNDING = 30 * 60 * 1000;\nconst format = 'h:mm a';\n\nclass User extends React.Component {\n\t\t//default state\n\t  constructor(props) {\n    \tsuper(props);\n\t    this.state = {\n\t      loggedIn: [],\n\t      currentUser: null\n\t    };\n\t    this.setUserState = this.setUserState.bind(this);\n\t  }\n\n\t  //Basically check to see if we are logged in already\n\t  componentDidMount() {\n\t\t\tthis.setUserState();\n\t\t}\n\n\t  //When login is successful we receive a googleUser json back from the service. Has some basic info like name, email and jwt token. We store it the session for later use\n\t  // FYI, session is the same throughout the app and can survive refresh.\n    onLoginSuccess(googleUser) {\n      var profile = googleUser.getBasicProfile();\n      document.getElementById('status').innerHTML = 'Thanks for logging in ' + profile.getName() + '!';\n\n\t\t\t//Store responce in session. JWT key included. Type sessionStorage.getItem('googleUser') in console to view. Add add jwt to authorization header when making requests.\n\t\t\tsessionStorage.setItem('googleUser',JSON.stringify(googleUser));\n\t\t\tthis.setUserState();\n    }\n\n    //If for some reason we get an error on trying to login, we need to clean up.\n    onLoginFailure(error) {\n\t    sessionStorage.clear('googleUser')\n\t    this.setUserState();\n    }\n\n\t //this method is called when the signout button is successful. Although logged out we need to clear the session and update the state\n   onLogout(googleUser) {\n\t    sessionStorage.clear('googleUser')\n\t    this.setUserState();\n\t    document.getElementById('status').innerHTML = null;\n    }\n\n    //parse the plain string json to get the user name. Mainly POC if we want to include the name somewhere else. Also it is used to decide to show sign in or out above.\n\t  setUserState() {\n\t  \tvar userJson = JSON.parse(sessionStorage.getItem('googleUser'));\n\n\t  \tif(userJson !== null){\n\t\t  \tthis.setState((state, props) => ({\n\t\t      loggedIn: userJson,\n\t\t      currentUser: userJson.profileObj.givenName\n\t\t    }));\n\t  \t}else{\n\t\t  \tthis.setState((state, props) => ({\n\t\t      loggedIn: null,\n\t\t      currentUser: null\n\t\t    }));\n\t  \t}\n\t  }\n\n\t\trender() {\n\n\t\t\t//part of the react-google-login library\n\t\t\t let googleSignIn = (\n\t\t\t\t  <GoogleLogin\n\t\t\t\t    clientId={CLIENT_ID}\n\t\t\t\t    buttonText=\"Login in with Google\"\n\t\t\t\t    onSuccess={this.onLoginSuccess.bind(this)}\n\t\t\t\t    onFailure={this.onLoginFailure.bind(this)} />\n\t\t    );\n\n\t\t\t let googleSignOut = (\n\t\t\t    <GoogleLogout\n\t\t\t      buttonText=\"Logout\"\n\t\t\t      onLogoutSuccess={this.onLogout.bind(this)}\n\t\t\t    />\n\t\t    );\n\n\t\t\t\treturn (\n\t\t\t  \t<div className=\"Loginwrapper\" style={{textAlign: \"center\", paddingTop: 200}}>\n\n\t\t\t\t\t\t\t{this.state.currentUser === null ? googleSignIn : googleSignOut} \n\t\t\t\t<div id=\"status\"  />\n\t\t\t    \t</div>\n\t\t\t\t);\n\t\t}\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}